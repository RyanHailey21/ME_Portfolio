# Sample workflow for building and deploying an Astro site to GitHub Pages
#
# To get started with Astro see: https://docs.astro.build/en/getting-started/
#
name: Deploy Astro site to Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

env:
  BUILD_PATH: "PortFolioSite" # Set to the subdirectory containing your Astro project
  # BUILD_PATH: subfolder

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Detect package manager
        id: detect-package-manager
        run: |
          PROJECT_ROOT_PATH="${{ github.workspace }}/${{ env.BUILD_PATH }}"
          if [ -f "${PROJECT_ROOT_PATH}/yarn.lock" ]; then
            echo "manager=yarn" >> $GITHUB_OUTPUT
            echo "command=install" >> $GITHUB_OUTPUT
            echo "runner=yarn" >> $GITHUB_OUTPUT
            echo "lockfile=yarn.lock" >> $GITHUB_OUTPUT
            exit 0
          elif [ -f "${PROJECT_ROOT_PATH}/package.json" ]; then # Check for package.json in the project path
            echo "manager=npm" >> $GITHUB_OUTPUT
            echo "command=ci" >> $GITHUB_OUTPUT
            echo "runner=npx --no-install" >> $GITHUB_OUTPUT
            echo "lockfile=package-lock.json" >> $GITHUB_OUTPUT
            exit 0
          else
            echo "Unable to determine package manager in ${PROJECT_ROOT_PATH}"
            exit 1
          fi
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: ${{ steps.detect-package-manager.outputs.manager }}
          cache-dependency-path: ${{ env.BUILD_PATH }}/${{ steps.detect-package-manager.outputs.lockfile }}
      - name: Install dependencies
        run: ${{ steps.detect-package-manager.outputs.manager }} ${{ steps.detect-package-manager.outputs.command }}
        working-directory: ${{ env.BUILD_PATH }}
      - name: Build with Astro
        run: |
          ${{ steps.detect-package-manager.outputs.runner }} astro build
        working-directory: ${{ env.BUILD_PATH }}

      - name: Restructure artifact for ME_Portfolio base
        run: |
          set -e
          SOURCE_DIST_DIR="${{ github.workspace }}/${{ env.BUILD_PATH }}/dist"
          TARGET_ARTIFACT_SUBDIR="${{ github.workspace }}/gh-pages-artifact/ME_Portfolio"

          echo "Source dist directory: ${SOURCE_DIST_DIR}"
          if [ ! -d "${SOURCE_DIST_DIR}" ] || [ -z "$(ls -A "${SOURCE_DIST_DIR}")" ]; then
            echo "Error: Source dist directory is missing or empty!"
            ls -la "${{ github.workspace }}/${{ env.BUILD_PATH }}/" # List contents of project dir for context
            exit 1
          fi
          
          echo "Cleaning up and creating artifact directory structure..."
          rm -rf "${{ github.workspace }}/gh-pages-artifact" 
          mkdir -p "${TARGET_ARTIFACT_SUBDIR}"
          
          echo "Copying contents from ${SOURCE_DIST_DIR} to ${TARGET_ARTIFACT_SUBDIR}..."
          cp -a "${SOURCE_DIST_DIR}/." "${TARGET_ARTIFACT_SUBDIR}/"
          
          echo "Contents of ${TARGET_ARTIFACT_SUBDIR} after copy:"
          ls -la "${TARGET_ARTIFACT_SUBDIR}"
        # working-directory defaults to ${{ github.workspace }}, paths are absolute

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: gh-pages-artifact # Uploads the contents of gh-pages-artifact (i.e., the ME_Portfolio folder)

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    needs: build
    runs-on: ubuntu-latest
    name: Deploy
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
